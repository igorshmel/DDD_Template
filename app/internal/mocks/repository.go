// Code generated by MockGen. DO NOT EDIT.
// Source: default_ddd/app/internal/adapters/port (interfaces: Extractor,Persister)

// Package mocks is a generated GoMock package.
package mocks

import (
	port "default_ddd/app/internal/adapters/port"
	dbo "default_ddd/app/pkg/dbo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExtractor is a mock of Extractor interface
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorMockRecorder
}

// MockExtractorMockRecorder is the mock recorder for MockExtractor
type MockExtractorMockRecorder struct {
	mock *MockExtractor
}

// NewMockExtractor creates a new mock instance
func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &MockExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtractor) EXPECT() *MockExtractorMockRecorder {
	return m.recorder
}

// GetCartItemsByUUIDs mocks base method
func (m *MockExtractor) GetCartItemsByUUIDs(arg0 []string) ([]dbo.CartItemDBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByUUIDs", arg0)
	ret0, _ := ret[0].([]dbo.CartItemDBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByUUIDs indicates an expected call of GetCartItemsByUUIDs
func (mr *MockExtractorMockRecorder) GetCartItemsByUUIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByUUIDs", reflect.TypeOf((*MockExtractor)(nil).GetCartItemsByUUIDs), arg0)
}

// GetProductByUUID mocks base method
func (m *MockExtractor) GetProductByUUID(arg0 *dbo.ProductDBO) (*dbo.ProductDBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByUUID", arg0)
	ret0, _ := ret[0].(*dbo.ProductDBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByUUID indicates an expected call of GetProductByUUID
func (mr *MockExtractorMockRecorder) GetProductByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByUUID", reflect.TypeOf((*MockExtractor)(nil).GetProductByUUID), arg0)
}

// GetUserByUUID mocks base method
func (m *MockExtractor) GetUserByUUID(arg0 string) (*dbo.UserDBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", arg0)
	ret0, _ := ret[0].(*dbo.UserDBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID
func (mr *MockExtractorMockRecorder) GetUserByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockExtractor)(nil).GetUserByUUID), arg0)
}

// MockPersister is a mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
}

// MockPersisterMockRecorder is the mock recorder for MockPersister
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// CreateCartItem mocks base method
func (m *MockPersister) CreateCartItem(arg0 *dbo.CartItemDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartItem indicates an expected call of CreateCartItem
func (mr *MockPersisterMockRecorder) CreateCartItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockPersister)(nil).CreateCartItem), arg0)
}

// CreateOrder mocks base method
func (m *MockPersister) CreateOrder(arg0 *dbo.OrderDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockPersisterMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockPersister)(nil).CreateOrder), arg0)
}

// CreateProduct mocks base method
func (m *MockPersister) CreateProduct(arg0 *dbo.ProductDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockPersisterMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockPersister)(nil).CreateProduct), arg0)
}

// CreateUser mocks base method
func (m *MockPersister) CreateUser(arg0 *dbo.UserDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockPersisterMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPersister)(nil).CreateUser), arg0)
}

// UnitOfWork mocks base method
func (m *MockPersister) UnitOfWork(arg0 func(port.Persister) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitOfWork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnitOfWork indicates an expected call of UnitOfWork
func (mr *MockPersisterMockRecorder) UnitOfWork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitOfWork", reflect.TypeOf((*MockPersister)(nil).UnitOfWork), arg0)
}

// UpdateCartItems mocks base method
func (m *MockPersister) UpdateCartItems(arg0 *dbo.OrderDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItems", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartItems indicates an expected call of UpdateCartItems
func (mr *MockPersisterMockRecorder) UpdateCartItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItems", reflect.TypeOf((*MockPersister)(nil).UpdateCartItems), arg0)
}

// UpdateProduct mocks base method
func (m *MockPersister) UpdateProduct(arg0 *dbo.ProductDBO, arg1 *dbo.CartItemDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockPersisterMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockPersister)(nil).UpdateProduct), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockPersister) UpdateUser(arg0 *dbo.UserDBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockPersisterMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPersister)(nil).UpdateUser), arg0)
}
