// Code generated by MockGen. DO NOT EDIT.
// Source: default_ddd/app/internal/adapters/port (interfaces: CreateUserUseCase,CreateProductUseCase,CreateCartItemUseCase,CreateOrderUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "default_ddd/app/pkg/dto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCreateUserUseCase is a mock of CreateUserUseCase interface
type MockCreateUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserUseCaseMockRecorder
}

// MockCreateUserUseCaseMockRecorder is the mock recorder for MockCreateUserUseCase
type MockCreateUserUseCaseMockRecorder struct {
	mock *MockCreateUserUseCase
}

// NewMockCreateUserUseCase creates a new mock instance
func NewMockCreateUserUseCase(ctrl *gomock.Controller) *MockCreateUserUseCase {
	mock := &MockCreateUserUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateUserUseCase) EXPECT() *MockCreateUserUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateUserUseCase) Execute(arg0 context.Context, arg1 *dto.CreateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCreateUserUseCaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateUserUseCase)(nil).Execute), arg0, arg1)
}

// MockCreateProductUseCase is a mock of CreateProductUseCase interface
type MockCreateProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateProductUseCaseMockRecorder
}

// MockCreateProductUseCaseMockRecorder is the mock recorder for MockCreateProductUseCase
type MockCreateProductUseCaseMockRecorder struct {
	mock *MockCreateProductUseCase
}

// NewMockCreateProductUseCase creates a new mock instance
func NewMockCreateProductUseCase(ctrl *gomock.Controller) *MockCreateProductUseCase {
	mock := &MockCreateProductUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateProductUseCase) EXPECT() *MockCreateProductUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateProductUseCase) Execute(arg0 context.Context, arg1 *dto.CreateProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCreateProductUseCaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateProductUseCase)(nil).Execute), arg0, arg1)
}

// MockCreateCartItemUseCase is a mock of CreateCartItemUseCase interface
type MockCreateCartItemUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCartItemUseCaseMockRecorder
}

// MockCreateCartItemUseCaseMockRecorder is the mock recorder for MockCreateCartItemUseCase
type MockCreateCartItemUseCaseMockRecorder struct {
	mock *MockCreateCartItemUseCase
}

// NewMockCreateCartItemUseCase creates a new mock instance
func NewMockCreateCartItemUseCase(ctrl *gomock.Controller) *MockCreateCartItemUseCase {
	mock := &MockCreateCartItemUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateCartItemUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateCartItemUseCase) EXPECT() *MockCreateCartItemUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateCartItemUseCase) Execute(arg0 context.Context, arg1 *dto.CreateCartItemRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCreateCartItemUseCaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateCartItemUseCase)(nil).Execute), arg0, arg1)
}

// MockCreateOrderUseCase is a mock of CreateOrderUseCase interface
type MockCreateOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateOrderUseCaseMockRecorder
}

// MockCreateOrderUseCaseMockRecorder is the mock recorder for MockCreateOrderUseCase
type MockCreateOrderUseCaseMockRecorder struct {
	mock *MockCreateOrderUseCase
}

// NewMockCreateOrderUseCase creates a new mock instance
func NewMockCreateOrderUseCase(ctrl *gomock.Controller) *MockCreateOrderUseCase {
	mock := &MockCreateOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateOrderUseCase) EXPECT() *MockCreateOrderUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateOrderUseCase) Execute(arg0 context.Context, arg1 *dto.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCreateOrderUseCaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateOrderUseCase)(nil).Execute), arg0, arg1)
}
